[gd_resource type="VisualShader" load_steps=18 format=2]

[sub_resource type="VisualShaderNodeVectorDecompose" id=1]

[sub_resource type="VisualShaderNodeVectorFunc" id=2]
function = 4

[sub_resource type="VisualShaderNodeVectorCompose" id=3]

[sub_resource type="VisualShaderNodeVectorFunc" id=4]
function = 4

[sub_resource type="VisualShaderNodeVectorDecompose" id=5]

[sub_resource type="VisualShaderNodeScalarOp" id=6]
operator = 6

[sub_resource type="VisualShaderNodeScalarOp" id=7]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=8]
operator = 2

[sub_resource type="VisualShaderNodeScalarInterp" id=9]

[sub_resource type="VisualShaderNodeScalarOp" id=10]

[sub_resource type="VisualShaderNodeScalarOp" id=11]
operator = 3

[sub_resource type="VisualShaderNodeScalarOp" id=12]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=13]
output_port_for_preview = 0
uniform_name = "ColorModifier"

[sub_resource type="VisualShaderNodeTexture" id=14]
source = 5

[sub_resource type="VisualShaderNodeInput" id=15]
input_name = "texture"

[sub_resource type="VisualShaderNodeInput" id=16]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorFunc" id=17]
function = 5

[resource]
code = "shader_type canvas_item;
uniform vec4 ColorModifier : hint_color;



void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:4
	vec3 n_out4p0 = ColorModifier.rgb;
	float n_out4p1 = ColorModifier.a;

// VectorFunc:11
	vec3 n_out11p0;
	{
		vec3 c = n_out4p0;
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		n_out11p0 = vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

// VectorDecompose:10
	float n_out10p0 = n_out11p0.x;
	float n_out10p1 = n_out11p0.y;
	float n_out10p2 = n_out11p0.z;

// Input:8
	vec3 n_out8p0 = vec3(UV, 0.0);

// Input:7

// Texture:6
	vec3 n_out6p0;
	float n_out6p1;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, n_out8p0.xy);
		n_out6p0 = TEXTURE_tex_read.rgb;
		n_out6p1 = TEXTURE_tex_read.a;
	}

// VectorFunc:13
	vec3 n_out13p0;
	{
		vec3 c = n_out6p0;
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		n_out13p0 = vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

// VectorDecompose:14
	float n_out14p0 = n_out13p0.x;
	float n_out14p1 = n_out13p0.y;
	float n_out14p2 = n_out13p0.z;

// ScalarOp:19
	float n_out19p0 = n_out10p1 + n_out14p1;

// ScalarOp:20
	float n_out20p0 = n_out14p1 / n_out19p0;

// ScalarMix:18
	float n_out18p0 = mix(n_out10p0, n_out14p0, n_out20p0);

// ScalarOp:15
	float n_out15p0 = max(n_out10p1, n_out14p1);

// ScalarOp:16
	float n_out16p0 = n_out10p2 * n_out14p2;

// ScalarOp:21
	float n_in21p1 = 2.00000;
	float n_out21p0 = n_out16p0 * n_in21p1;

// VectorCompose:12
	vec3 n_out12p0 = vec3(n_out18p0, n_out15p0, n_out21p0);

// VectorFunc:9
	vec3 n_out9p0;
	{
		vec3 c = n_out12p0;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out9p0 = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// ScalarOp:17
	float n_out17p0 = n_out4p1 * n_out6p1;

// Output:0
	COLOR.rgb = n_out9p0;
	COLOR.a = n_out17p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -380.285, -220.721 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 820, 180 )
nodes/fragment/4/node = SubResource( 13 )
nodes/fragment/4/position = Vector2( -400, -160 )
nodes/fragment/6/node = SubResource( 14 )
nodes/fragment/6/position = Vector2( -400, 60 )
nodes/fragment/7/node = SubResource( 15 )
nodes/fragment/7/position = Vector2( -560, 140 )
nodes/fragment/8/node = SubResource( 16 )
nodes/fragment/8/position = Vector2( -560, 60 )
nodes/fragment/9/node = SubResource( 17 )
nodes/fragment/9/position = Vector2( 820, -120 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -20, -100 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -200, -100 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 600, -80 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( -200, 40 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( -20, 40 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( 320, -40 )
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( 320, 80 )
nodes/fragment/17/node = SubResource( 8 )
nodes/fragment/17/position = Vector2( 320, 200 )
nodes/fragment/18/node = SubResource( 9 )
nodes/fragment/18/position = Vector2( 500, -460 )
nodes/fragment/19/node = SubResource( 10 )
nodes/fragment/19/position = Vector2( 20, -460 )
nodes/fragment/20/node = SubResource( 11 )
nodes/fragment/20/position = Vector2( 240, -480 )
nodes/fragment/21/node = SubResource( 12 )
nodes/fragment/21/position = Vector2( 520, 80 )
nodes/fragment/connections = PoolIntArray( 7, 0, 6, 2, 8, 0, 6, 0, 9, 0, 0, 0, 4, 0, 11, 0, 11, 0, 10, 0, 12, 0, 9, 0, 6, 0, 13, 0, 13, 0, 14, 0, 10, 1, 15, 0, 14, 1, 15, 1, 14, 2, 16, 1, 10, 2, 16, 0, 4, 1, 17, 0, 6, 1, 17, 1, 17, 0, 0, 1, 10, 0, 18, 0, 14, 0, 18, 1, 18, 0, 12, 0, 10, 1, 19, 0, 14, 1, 19, 1, 19, 0, 20, 1, 20, 0, 18, 2, 14, 1, 20, 0, 15, 0, 12, 1, 16, 0, 21, 0, 21, 0, 12, 2 )
